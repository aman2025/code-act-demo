import React, { useState } from 'react';
import DynamicUIRenderer from '../DynamicUIRenderer';

/**
 * Example usage of DynamicUIRenderer with various component types
 */
export default function DynamicUIExample() {
  const [result, setResult] = useState('');

  // Example component definitions that might come from AI
  const calculatorComponents = [
    {
      type: 'form',
      props: { className: 'calculator-form' },
      children: [
        {
          type: 'element',
          tag: 'h3',
          props: { className: 'text-lg font-semibold mb-4' },
          children: ['Simple Calculator']
        },
        {
          type: 'input',
          props: {
            name: 'number1',
            type: 'number',
            placeholder: 'Enter first number',
            className: 'mb-2'
          }
        },
        {
          type: 'input',
          props: {
            name: 'number2',
            type: 'number',
            placeholder: 'Enter second number',
            className: 'mb-4'
          }
        },
        {
          type: 'button',
          props: { onClick: 'add' },
          text: 'Add Numbers'
        }
      ]
    }
  ];

  const surveyComponents = [
    {
      type: 'form',
      props: { className: 'survey-form' },
      children: [
        {
          type: 'element',
          tag: 'h3',
          props: { className: 'text-lg font-semibold mb-4' },
          children: ['Quick Survey']
        },
        {
          type: 'input',
          props: {
            name: 'name',
            type: 'text',
            placeholder: 'Your name',
            className: 'mb-2'
          }
        },
        {
          type: 'input',
          props: {
            name: 'email',
            type: 'email',
            placeholder: 'Your email',
            className: 'mb-4'
          }
        },
        {
          type: 'button',
          props: { onClick: 'submit-survey' },
          text: 'Submit Survey'
        }
      ]
    }
  ];

  // Handle interactions from dynamic components
  const handleInteraction = async ({ action, componentId, values, messageId }) => {
    console.log('Interaction:', { action, componentId, values, messageId });
    
    switch (action) {
      case 'add':
        const num1 = parseFloat(values.number1) || 0;
        const num2 = parseFloat(values.number2) || 0;
        const sum = num1 + num2;
        setResult(`Result: ${num1} + ${num2} = ${sum}`);
        break;
        
      case 'submit-survey':
        setResult(`Survey submitted for ${values.name} (${values.email})`);
        break;
        
      default:
        setResult(`Action "${action}" executed with values: ${JSON.stringify(values)}`);
    }
  };

  return (
    <div className="p-6 max-w-2xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">Dynamic UI Components Example</h1>
      
      <div className="space-y-6">
        <div>
          <h2 className="text-xl font-semibold mb-3">Calculator Example</h2>
          <DynamicUIRenderer
            components={calculatorComponents}
            onInteraction={handleInteraction}
            messageId="calculator-example"
          />
        </div>

        <div>
          <h2 className="text-xl font-semibold mb-3">Survey Example</h2>
          <DynamicUIRenderer
            components={surveyComponents}
            onInteraction={handleInteraction}
            messageId="survey-example"
          />
        </div>

        {result && (
          <div className="mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
            <h3 className="font-semibold text-green-800">Result:</h3>
            <p className="text-green-700">{result}</p>
          </div>
        )}
      </div>
    </div>
  );
}

/**
 * Example of how AI might generate component definitions
 */
export const generateComponentDefinition = (userRequest) => {
  // This would typically be generated by AI based on user input
  const examples = {
    'contact form': [
      {
        type: 'form',
        children: [
          {
            type: 'input',
            props: { name: 'name', placeholder: 'Name', required: true }
          },
          {
            type: 'input',
            props: { name: 'email', type: 'email', placeholder: 'Email', required: true }
          },
          {
            type: 'input',
            props: { name: 'message', placeholder: 'Message', required: true }
          },
          {
            type: 'button',
            props: { onClick: 'submit-contact' },
            text: 'Send Message'
          }
        ]
      }
    ],
    'number input': [
      {
        type: 'input',
        props: { name: 'amount', type: 'number', placeholder: 'Enter amount' }
      },
      {
        type: 'button',
        props: { onClick: 'process-number' },
        text: 'Process'
      }
    ]
  };

  return examples[userRequest.toLowerCase()] || [];
};